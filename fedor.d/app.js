document.addEventListener('DOMContentLoaded', async () => {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
  const tg = window.Telegram?.WebApp;
  tg?.expand();

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
  const userData = tg?.initDataUnsafe?.user || {};
  const userId = userData.id.toString();
  const username = userData.username || `${userData.first_name || '–ì–æ—Å—Ç—å'}${userData.last_name ? ' ' + userData.last_name : ''}`;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI
  document.getElementById('user-name').textContent = username;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  let state = {
    balance: 0,
    inventory: [],
    isLoading: false
  };

  // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  const balanceEl = document.getElementById('stars');
  const inventoryEl = document.getElementById('inventory-items');
  const addStarsBtn = document.getElementById('add-stars');
  const refreshBtn = document.getElementById('refresh-balance');
  const rouletteCard = document.getElementById('roulette-card');
  const closeCasesBtn = document.getElementById('close-cases');
  const casesPage = document.getElementById('cases-page');
  const casesContainer = document.querySelector('.cases-container');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CaseOpening
  let caseOpeningSystem;
  fetch('config.json')
    .then(response => response.json())
    .then(config => {
      caseOpeningSystem = new CaseOpening(config);
    });

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async function loadUserData() {
    try {
      state.isLoading = true;
      const response = await fetch(`/api/user?user_id=${userId}`);
      if (response.ok) {
        const data = await response.json();
        state.balance = data.balance;
        state.inventory = data.inventory;
        updateUI();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      // Fallback –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      state.balance = 100;
      state.inventory = [];
      updateUI();
    } finally {
      state.isLoading = false;
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
  function updateUI() {
    balanceEl.textContent = state.balance;
    renderInventory();
  }

  // –†–µ–Ω–¥–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
  function renderInventory() {
    inventoryEl.innerHTML = state.inventory.length > 0
      ? state.inventory.map(item => `
        <div class="item-card" data-item-id="${item.id}">
          <img src="images/items/${item.image}" alt="${item.name}">
          <div class="item-name">${item.name}</div>
          <div class="item-actions">
            <button class="sell-btn" data-price="${item.sell_price}">üí∞ ${item.sell_price}‚≠ê</button>
            <button class="withdraw-btn">üì§ –í—ã–≤–µ—Å—Ç–∏</button>
          </div>
        </div>
      `).join('')
      : '<div class="empty-message">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</div>';

    // –ù–∞–≤–µ—à–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    document.querySelectorAll('.sell-btn').forEach(btn => {
      btn.addEventListener('click', async () => {
        const itemId = btn.closest('.item-card').dataset.itemId;
        const price = parseInt(btn.dataset.price);
        if (confirm(`–ü—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∑–∞ ${price} ‚≠ê?`)) {
          await sellItem(itemId, price);
        }
      });
    });
  }

  // –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
  async function sellItem(itemId, price) {
    try {
      const response = await fetch('/api/sell-item', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          user_id: userId,
          item_id: itemId
        })
      });

      if (response.ok) {
        state.balance += price;
        state.inventory = state.inventory.filter(item => item.id !== itemId);
        updateUI();
        showAlert(`–ü—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥–∞–Ω –∑–∞ ${price} ‚≠ê`);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏:', error);
      showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞', true);
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  function showAlert(message, isError = false) {
    const alert = document.createElement('div');
    alert.className = `payment-alert ${isError ? 'error' : ''}`;
    alert.textContent = message;
    document.body.appendChild(alert);

    setTimeout(() => {
      alert.remove();
    }, 3000);
  }

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
  async function openCase(caseType) {
    if (state.isLoading) return;

    try {
      state.isLoading = true;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ü–µ–Ω—É –∫–µ–π—Å–∞)
      if (state.balance < 74.5) {
        showAlert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!', true);
        return;
      }

      const response = await fetch('/api/open-case', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          user_id: userId,
          case_type: caseType
        })
      });

      if (response.ok) {
        const result = await response.json();
        state.balance -= 74.5; // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–µ–π—Å–∞
        state.inventory.push(result.item); // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        updateUI();

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∫–µ–π—Å–æ–≤
        caseOpeningSystem.showWonItem(result.item);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:', error);
      showAlert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞', true);
    } finally {
      state.isLoading = false;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  addStarsBtn.addEventListener('click', () => {
    if (tg) {
      tg.openTelegramLink(`https://t.me/StarAzart_bot?start=addstars_${userId}`);
    } else {
      window.location.href = `payment.html?user_id=${userId}`;
    }
  });

  refreshBtn.addEventListener('click', loadUserData);

  rouletteCard.addEventListener('click', () => {
    casesPage.style.display = 'flex';
  });

  closeCasesBtn.addEventListener('click', () => {
    casesPage.style.display = 'none';
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–µ–π—Å–æ–≤
  casesContainer.addEventListener('click', (e) => {
    const caseCard = e.target.closest('.case-card');
    if (caseCard) {
      const caseType = caseCard.dataset.case;
      openCase(caseType);
      casesPage.style.display = 'none';
    }
  });

  // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  loadUserData();
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–ª–µ—Ä—Ç–æ–≤
function showAlert(message, isError = false) {
  const alert = document.createElement('div');
  alert.className = `payment-alert ${isError ? 'error' : ''}`;
  alert.textContent = message;
  document.body.appendChild(alert);

  setTimeout(() => {
    alert.remove();
  }, 3000);
}