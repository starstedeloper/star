document.addEventListener('DOMContentLoaded', () => {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    const tg = window.Telegram?.WebApp;
    if (tg) {
        tg.expand();
        tg.enableClosingConfirmation();
        tg.BackButton.show();
        tg.BackButton.onClick(() => tg.close());
    }

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const state = {
        userId: '0',
        username: '–ì–æ—Å—Ç—å',
        balance: 0,
        inventory: [],
        loading: false,
        isTelegram: !!tg
    };

    // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    const elements = {
        welcomeScreen: document.getElementById('welcome-screen'),
        appInterface: document.getElementById('app-interface'),
        userName: document.getElementById('user-name'),
        starsBalance: document.getElementById('stars'),
        inventoryItems: document.getElementById('inventory-items'),
        addStarsBtn: document.getElementById('add-stars'),
        refreshBalanceBtn: document.getElementById('refresh-balance'),
        rouletteCard: document.getElementById('roulette-card')
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    async function initApp() {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ URL –∏–ª–∏ Telegram WebApp
            const params = new URLSearchParams(window.location.search);

            state.userId = params.get('user_id') || (tg?.initDataUnsafe?.user?.id || '0');
            state.username = params.get('username') || tg?.initDataUnsafe?.user?.first_name || '–ì–æ—Å—Ç—å';
            state.balance = parseInt(params.get('stars') || '0');

            try {
                state.inventory = JSON.parse(params.get('inventory') || '[]');
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', e);
                state.inventory = [];
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            updateUI();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            showMainInterface();

            // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('App initialized with:', state);

        } catch (error) {
            console.error('Initialization error:', error);
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            showMainInterface();
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    function updateUI() {
        elements.userName.textContent = state.username;
        elements.starsBalance.textContent = state.balance;
        renderInventory();
    }

    // –†–µ–Ω–¥–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    function renderInventory() {
        elements.inventoryItems.innerHTML = state.inventory.length > 0
            ? state.inventory.map(item => `
                <div class="item-card">
                    <div class="item-emoji">${item.emoji || 'üéÅ'}</div>
                    <div class="item-name">${item.name}</div>
                    <div class="item-price">${item.sell_price} ‚≠ê</div>
                    <div class="item-buttons">
                        <button class="sell-btn" data-id="${item.name}">üí∞</button>
                        <button class="withdraw-btn" data-id="${item.name}">üì§</button>
                    </div>
                </div>
            `).join('')
            : '<div class="empty-message">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</div>';

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.sell-btn').forEach(btn => {
            btn.addEventListener('click', () => sellItem(btn.dataset.id));
        });

        document.querySelectorAll('.withdraw-btn').forEach(btn => {
            btn.addEventListener('click', () => withdrawItem(btn.dataset.id));
        });
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    function showMainInterface() {
        elements.welcomeScreen.style.display = 'none';
        elements.appInterface.style.display = 'flex';
    }

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
    async function sellItem(itemName) {
        if (state.loading) return;
        state.loading = true;

        try {
            const item = state.inventory.find(i => i.name === itemName);
            if (!item) return;

            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            alert(`–ü—Ä–µ–¥–º–µ—Ç "${item.name}" –ø—Ä–æ–¥–∞–Ω –∑–∞ ${item.sell_price} ‚≠ê`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            state.balance += item.sell_price;
            state.inventory = state.inventory.filter(i => i.name !== itemName);
            updateUI();

        } finally {
            state.loading = false;
        }
    }

    async function withdrawItem(itemName) {
        if (state.loading) return;
        alert(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞ "${itemName}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
    }

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
    async function openCase(caseType) {
        if (state.loading) return;
        state.loading = true;

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            const casePrice = getCasePrice(caseType);
            if (state.balance < casePrice) {
                alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞!');
                return;
            }

            // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞
            const wonItem = simulateCaseOpening(caseType);
            alert(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${wonItem.name} (${wonItem.sell_price} ‚≠ê)`);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            state.balance -= casePrice;
            state.inventory.push(wonItem);
            updateUI();

        } finally {
            state.loading = false;
        }
    }

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ (–¥–ª—è –¥–µ–º–æ)
    function simulateCaseOpening(caseType) {
        const commonItems = [
            { name: "–°–µ—Ä–¥—Ü–µ", emoji: "‚ù§Ô∏è", sell_price: 15 },
            { name: "–ü–ª—é—à–µ–≤—ã–π –º–∏—à–∫–∞", emoji: "üß∏", sell_price: 15 },
            { name: "–ü–æ–¥–∞—Ä–æ–∫", emoji: "üéÅ", sell_price: 25 },
            { name: "–†–æ–∑–∞", emoji: "üåπ", sell_price: 25 },
            { name: "–¢–æ—Ä—Ç", emoji: "üéÇ", sell_price: 50 },
            { name: "–ë—É–∫–µ—Ç", emoji: "üíê", sell_price: 50 },
            { name: "–†–∞–∫–µ—Ç–∞", emoji: "üöÄ", sell_price: 50 },
            { name: "–ö—É–±–æ–∫", emoji: "üèÜ", sell_price: 100 },
            { name: "–ö–æ–ª—å—Ü–æ", emoji: "üíç", sell_price: 100 },
            { name: "–ê–ª–º–∞–∑", emoji: "üíé", sell_price: 100 }
        ];

        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ - —á–µ–º –¥–æ—Ä–æ–∂–µ –∫–µ–π—Å, —Ç–µ–º –ª—É—á—à–µ —à–∞–Ω—Å—ã
        const index = Math.floor(Math.random() * commonItems.length * (caseType === 'legendary' ? 0.3 : caseType === 'epic' ? 0.5 : 0.8));
        return commonItems[Math.min(index, commonItems.length - 1)];
    }

    function getCasePrice(caseType) {
        const prices = {
            'common': 10,
            'rare': 25,
            'epic': 50,
            'legendary': 100
        };
        return prices[caseType] || 10;
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    elements.addStarsBtn.addEventListener('click', () => {
        if (state.isTelegram) {
            tg.openTelegramLink(`https://t.me/StarAzart_bot?start=pay_${state.userId}_100`);
        } else {
            window.location.href = `payment.html?user_id=${state.userId}`;
        }
    });

    elements.refreshBalanceBtn.addEventListener('click', async () => {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        alert('–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
    });

    elements.rouletteCard.addEventListener('click', () => {
        document.getElementById('cases-page').style.display = 'flex';
    });

    document.getElementById('close-cases').addEventListener('click', () => {
        document.getElementById('cases-page').style.display = 'none';
    });

    document.querySelectorAll('.case-card').forEach(card => {
        card.addEventListener('click', () => {
            document.getElementById('cases-page').style.display = 'none';
            openCase(card.dataset.case);
        });
    });

    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(initApp, 1000);
});