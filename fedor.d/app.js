document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram?.WebApp;
    if (tg) {
        tg.expand();
        tg.enableClosingConfirmation();
        tg.BackButton.show();
        tg.BackButton.onClick(() => tg.close());
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä—É–ª–µ—Ç–∫—É –≥–ª–æ–±–∞–ª—å–Ω–æ
    const roulette = new Roulette();

    const state = {
        userId: '0',
        username: '–ì–æ—Å—Ç—å',
        balance: 0,
        inventory: [],
        loading: false,
        isTelegram: !!tg
    };

    const elements = {
        welcomeScreen: document.getElementById('welcome-screen'),
        appInterface: document.getElementById('app-interface'),
        userName: document.getElementById('user-name'),
        starsBalance: document.getElementById('stars'),
        inventoryItems: document.getElementById('inventory-items'),
        addStarsBtn: document.getElementById('add-stars'),
        refreshBalanceBtn: document.getElementById('refresh-balance'),
        rouletteCard: document.getElementById('roulette-card'),
        casesPage: document.getElementById('cases-page'),
        closeCasesBtn: document.getElementById('close-cases')
    };

    function initApp() {
        try {
            const params = new URLSearchParams(window.location.search);
            
            state.userId = params.get('user_id') || (tg?.initDataUnsafe?.user?.id || '0');
            state.username = tg?.initDataUnsafe?.user?.first_name || '–ì–æ—Å—Ç—å';
            state.balance = parseInt(params.get('stars') || '0');
            
            try {
                const inventoryParam = params.get('inventory');
                if (inventoryParam) {
                    state.inventory = JSON.parse(decodeURIComponent(inventoryParam));
                } else {
                    state.inventory = [];
                }
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', e);
                state.inventory = [];
            }

            updateUI();
            showMainInterface();
            console.log('App initialized with state:', state);
        } catch (error) {
            console.error('Initialization error:', error);
            showMainInterface(); 
        }
    }

    function updateUI() {
        elements.userName.textContent = state.username;
        elements.starsBalance.textContent = state.balance;
        renderInventory();
    }

    function renderInventory() {
        elements.inventoryItems.innerHTML = state.inventory.length > 0
            ? state.inventory.map(item => `
                <div class="item-card">
                    <div class="item-emoji">${item.emoji || 'üéÅ'}</div>
                    <div class="item-name">${item.name}</div>
                    <div class="item-price">${item.sell_price} ‚≠ê</div>
                    <div class="item-buttons">
                        <!-- –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ2: –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –∫ –∫–Ω–æ–ø–∫–∞–º -->
                        <button class="sell-btn" data-id="${item.id}">–ü—Ä–æ–¥–∞—Ç—å</button>
                        <button class="withdraw-btn" data-id="${item.id}">–í—ã–≤–µ—Å—Ç–∏</button>
                    </div>
                </div>
            `).join('')
            : '<div class="empty-message">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</div>';

        document.querySelectorAll('.sell-btn').forEach(btn => {
            btn.addEventListener('click', () => sellItem(parseInt(btn.dataset.id)));
        });

        document.querySelectorAll('.withdraw-btn').forEach(btn => {
            btn.addEventListener('click', () => withdrawItem(parseInt(btn.dataset.id)));
        });
    }

    function showMainInterface() {
        elements.welcomeScreen.style.setProperty('display', 'none', 'important');
        elements.appInterface.style.setProperty('display', 'flex', 'important');
    }

    async function sellItem(itemId) {
        if (state.loading) return;
        state.loading = true;

        try {
            const item = state.inventory.find(i => i.id === itemId);
            if (!item) {
                alert("–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                state.loading = false;
                return;
            }

            if (tg) {
                tg.sendData(JSON.stringify({ action: 'sell_item', item_id: itemId }));
            }
            
            alert(`–ü—Ä–µ–¥–º–µ—Ç "${item.name}" –ø—Ä–æ–¥–∞–Ω –∑–∞ ${item.sell_price} ‚≠ê`);
            state.balance += item.sell_price;
            state.inventory = state.inventory.filter(i => i.id !== itemId);
            updateUI();
        } finally {
            state.loading = false;
        }
    }

    async function withdrawItem(itemId) {
        if (state.loading) return;
        
        const item = state.inventory.find(i => i.id === itemId);
        if (!item) { alert("–û—à–∏–±–∫–∞: –ø—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."); return; }

         if (tg) {
            tg.sendData(JSON.stringify({ action: 'withdraw_item', item_id: itemId }));
        }
        alert(`–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞ "${item.name}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`);
        
        state.inventory = state.inventory.filter(i => i.id !== itemId);
        updateUI();
    }

    async function openCase(caseType) {
        if (state.loading) return;
        state.loading = true;

        try {
            const casePrice = getCasePrice(caseType);
            if (state.balance < casePrice) {
                alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç—Ç–æ–≥–æ –∫–µ–π—Å–∞!');
                return;
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –ø—É–ª –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Å–∏–º—É–ª–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à
            const { pool, wonItem } = simulateCaseOpening(caseType);
            
            // –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ4: –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Ä—É–ª–µ—Ç–∫–∏ –≤–º–µ—Å—Ç–æ alert
            await roulette.spin(pool, wonItem);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É –ü–û–°–õ–ï –∞–Ω–∏–º–∞—Ü–∏–∏
            if (tg) {
                tg.sendData(JSON.stringify({ action: 'open_case', caseType: caseType, wonItem: wonItem }));
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ª–æ–∫–∞–ª—å–Ω–æ
            state.balance -= casePrice;
            updateUI();
            
            alert(`–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${wonItem.name}! –ù–∞–∂–º–∏—Ç–µ "–û–±–Ω–æ–≤–∏—Ç—å", —á—Ç–æ–±—ã –ø—Ä–µ–¥–º–µ—Ç –ø–æ—è–≤–∏–ª—Å—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.`);

        } catch(e) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞:", e);
        } finally {
            state.loading = false;
        }
    }

    // –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ3: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–∞–¥–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    function simulateCaseOpening(caseType) {
        const items = {
            common: [
                { name: "–°–µ—Ä–¥—Ü–µ", emoji: "‚ù§Ô∏è", sell_price: 15 }, 
                { name: "–ü–ª—é—à–µ–≤—ã–π –º–∏—à–∫–∞", emoji: "üß∏", sell_price: 15 }
            ],
            rare: [
                { name: "–ü–æ–¥–∞—Ä–æ–∫", emoji: "üéÅ", sell_price: 25 }, 
                { name: "–†–æ–∑–∞", emoji: "üåπ", sell_price: 25 }
            ],
            epic: [
                { name: "–¢–æ—Ä—Ç", emoji: "üéÇ", sell_price: 50 }, 
                { name: "–ë—É–∫–µ—Ç", emoji: "üíê", sell_price: 50 },
                { name: "–†–∞–∫–µ—Ç–∞", emoji: "üöÄ", sell_price: 50 }
            ],
            legendary: [
                { name: "–ö—É–±–æ–∫", emoji: "üèÜ", sell_price: 100 }, 
                { name: "–ö–æ–ª—å—Ü–æ", emoji: "üíç", sell_price: 100 }, 
                { name: "–ê–ª–º–∞–∑", emoji: "üíé", sell_price: 100 }
            ]
        };

        let pool = [];
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–ª –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–µ–π—Å–∞
        switch(caseType) {
            case 'common':
                pool = [...items.common, ...items.rare];
                break;
            case 'rare':
                pool = [...items.rare, ...items.epic];
                break;
            case 'epic':
                pool = [...items.epic, ...items.legendary];
                break;
            case 'legendary':
                pool = [...items.legendary, ...items.epic];
                break;
            default:
                pool = items.common;
        }

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—É–ª–∞
        const wonItem = pool[Math.floor(Math.random() * pool.length)];
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏ –ø—É–ª –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏, –∏ —Å–∞–º –≤—ã–∏–≥—Ä—ã—à
        return { pool, wonItem };
    }

    function getCasePrice(caseType) {
        const prices = { 'common': 10, 'rare': 25, 'epic': 50, 'legendary': 100 };
        return prices[caseType] || 10;
    }

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
    elements.addStarsBtn.addEventListener('click', () => {
        if (state.isTelegram) {
            tg.openTelegramLink(`https://t.me/StarAzart_bot?start=pay_${state.userId}_100`);
        } else {
            // –î–ª—è –¥–µ–±–∞–≥–∞ –≤ –±—Ä–∞—É–∑–µ—Ä–µ
            window.open(`payment.html?user_id=${state.userId}`, '_blank');
        }
    });
    
    elements.refreshBalanceBtn.addEventListener('click', () => {
        alert('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
        window.location.reload();
    });

    elements.rouletteCard.addEventListener('click', () => {
        elements.casesPage.style.display = 'flex';
    });
    
    elements.closeCasesBtn.addEventListener('click', () => {
        elements.casesPage.style.display = 'none';
    });
    
    document.querySelectorAll('.case-card').forEach(card => {
        card.addEventListener('click', () => {
            elements.casesPage.style.display = 'none';
            openCase(card.dataset.case);
        });
    });

    setTimeout(initApp, 2000); // –£–º–µ–Ω—å—à–∏–ª –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
});
