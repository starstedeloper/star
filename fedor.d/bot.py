from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import sqlite3
import json
import logging
import requests
import asyncio
from datetime import datetime, timedelta
import random
import urllib.parse

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8001659110:AAE4JyLTuX5s6zyj5F_CQoW5e-J-FGhosg4"
WEBAPP_URL = "https://star-ruddy-three.vercel.app/"
ADMIN_IDS = [8132062572]  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
CRYPTO_PAY_TOKEN = "421215:AAjdPiEHPnyscrlkUMEICJzkonZIZJDkXo9"
CRYPTO_PAY_API = "https://pay.crypt.bot/api"
STARS_RATE = 1.4  # 1 –∑–≤–µ–∑–¥–∞ = 1.4 —Ä—É–±–ª—è
MIN_PAYMENT = 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    with sqlite3.connect('users.db') as conn:
        cursor = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                stars INTEGER DEFAULT 0,
                last_active TIMESTAMP,
                registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_admin BOOLEAN DEFAULT FALSE
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS inventory (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                item_id INTEGER NOT NULL,
                item_name TEXT NOT NULL,
                item_image TEXT,
                emoji TEXT,
                sell_price INTEGER,
                withdraw_price INTEGER,
                obtained_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_withdrawn BOOLEAN DEFAULT FALSE,
                FOREIGN KEY(user_id) REFERENCES users(user_id) ON DELETE CASCADE
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                invoice_id TEXT PRIMARY KEY,
                user_id INTEGER,
                stars INTEGER,
                amount_usd REAL,
                status TEXT CHECK(status IN ('pending', 'paid', 'expired')),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                paid_at TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –∫–µ–π—Å–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS cases (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                price INTEGER NOT NULL,
                image TEXT,
                emoji TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                image TEXT,
                emoji TEXT,
                sell_price INTEGER NOT NULL,
                withdraw_price INTEGER NOT NULL,
                rarity TEXT CHECK(rarity IN ('common', 'rare', 'epic', 'legendary')),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –∫–µ–π—Å–∞—Ö
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS case_items (
                case_id INTEGER NOT NULL,
                item_id INTEGER NOT NULL,
                chance REAL NOT NULL,
                PRIMARY KEY (case_id, item_id),
                FOREIGN KEY(case_id) REFERENCES cases(id) ON DELETE CASCADE,
                FOREIGN KEY(item_id) REFERENCES items(id) ON DELETE CASCADE
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –≤—ã–≤–æ–¥–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS withdrawals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                item_id INTEGER NOT NULL,
                status TEXT CHECK(status IN ('pending', 'completed', 'rejected')),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                completed_at TIMESTAMP,
                admin_id INTEGER,
                FOREIGN KEY(user_id) REFERENCES users(user_id),
                FOREIGN KEY(item_id) REFERENCES inventory(id)
            )
        ''')

        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        for admin_id in ADMIN_IDS:
            cursor.execute('''
                INSERT OR IGNORE INTO users (user_id, is_admin)
                VALUES (?, TRUE)
            ''', (admin_id,))

        conn.commit()

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–µ–π—Å—ã –∏ –ø—Ä–µ–¥–º–µ—Ç—ã)
async def load_initial_data():
    with sqlite3.connect('users.db') as conn:
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–µ–π—Å—ã
        cursor.execute('SELECT 1 FROM cases LIMIT 1')
        if not cursor.fetchone():
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–µ–π—Å—ã
            cases = [
                ('–û–±—ã—á–Ω—ã–π –∫–µ–π—Å', 10, 'common_case.png', 'üì¶'),
                ('–†–µ–¥–∫–∏–π –∫–µ–π—Å', 25, 'rare_case.png', 'üéÅ'),
                ('–≠–ø–∏—á–µ—Å–∫–∏–π –∫–µ–π—Å', 50, 'epic_case.png', 'üíé'),
                ('–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∫–µ–π—Å', 100, 'legendary_case.png', 'üèÜ')
            ]
            
            for case in cases:
                cursor.execute('''
                    INSERT INTO cases (name, price, image, emoji)
                    VALUES (?, ?, ?, ?)
                ''', case)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            items = [
                ('–°–µ—Ä–¥—Ü–µ', 'heart.png', '‚ù§Ô∏è', 15, 15, 'common'),
                ('–ü–ª—é—à–µ–≤—ã–π –º–∏—à–∫–∞', 'teddy_bear.png', 'üß∏', 15, 15, 'common'),
                ('–ü–æ–¥–∞—Ä–æ–∫', 'gift.png', 'üéÅ', 25, 25, 'rare'),
                ('–†–æ–∑–∞', 'rose.png', 'üåπ', 25, 25, 'rare'),
                ('–¢–æ—Ä—Ç', 'cake.png', 'üéÇ', 50, 50, 'epic'),
                ('–ë—É–∫–µ—Ç', 'bouquet.png', 'üíê', 50, 50, 'epic'),
                ('–†–∞–∫–µ—Ç–∞', 'rocket.png', 'üöÄ', 50, 50, 'epic'),
                ('–ö—É–±–æ–∫', 'trophy.png', 'üèÜ', 100, 100, 'legendary'),
                ('–ö–æ–ª—å—Ü–æ', 'ring.png', 'üíç', 100, 100, 'legendary'),
                ('–ê–ª–º–∞–∑', 'diamond.png', 'üíé', 100, 100, 'legendary')
            ]
            
            for item in items:
                cursor.execute('''
                    INSERT INTO items (name, image, emoji, sell_price, withdraw_price, rarity)
                    VALUES (?, ?, ?, ?, ?, ?)
                ''', item)
            
            # –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã —Å –∫–µ–π—Å–∞–º–∏
            case_items = [
                (1, 1, 0.18), (1, 2, 0.18), (1, 3, 0.15), (1, 4, 0.15),
                (1, 5, 0.10), (1, 6, 0.08), (1, 7, 0.07), (1, 8, 0.04),
                (1, 9, 0.03), (1, 10, 0.02),
                
                (2, 3, 0.25), (2, 4, 0.25), (2, 5, 0.20), (2, 6, 0.15),
                (2, 7, 0.10), (2, 8, 0.03), (2, 9, 0.02),
                
                (3, 5, 0.30), (3, 6, 0.25), (3, 7, 0.20), (3, 8, 0.15),
                (3, 9, 0.07), (3, 10, 0.03),
                
                (4, 8, 0.40), (4, 9, 0.35), (4, 10, 0.25)
            ]
            
            for case_item in case_items:
                cursor.execute('''
                    INSERT INTO case_items (case_id, item_id, chance)
                    VALUES (?, ?, ?)
                ''', case_item)
            
            conn.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_data(user_id):
    with sqlite3.connect('users.db') as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        cursor.execute('SELECT stars FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        cursor.execute('''
            SELECT 
                i.id, i.item_name as name, i.item_image as image, i.emoji, 
                i.sell_price, i.withdraw_price
            FROM inventory i
            WHERE i.user_id = ? AND i.is_withdrawn = FALSE
        ''', (user_id,))
        inventory = cursor.fetchall()

        return {
            'balance': user['stars'] if user else 0,
            'inventory': [dict(item) for item in inventory]
        }

# –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ-–∏–Ω–≤–æ–π—Å–∞
async def create_crypto_invoice(user_id, stars, amount_usd):
    try:
        headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
        payload = {
            "asset": "USDT",
            "amount": str(amount_usd),
            "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {stars} –∑–≤–µ–∑–¥",
            "paid_btn_url": f"{WEBAPP_URL}?payment_success={user_id}_{stars}",
            "payload": json.dumps({"user_id": user_id, "stars": stars})
        }

        response = requests.post(
            f"{CRYPTO_PAY_API}/createInvoice",
            headers=headers,
            json=payload
        )

        if response.status_code == 200:
            result = response.json().get('result')

            with sqlite3.connect('users.db') as conn:
                conn.execute('''
                    INSERT INTO payments (invoice_id, user_id, stars, amount_usd, status)
                    VALUES (?, ?, ?, ?, ?)
                ''', (result['invoice_id'], user_id, stars, amount_usd, 'pending'))
                conn.commit()

            return result
        else:
            logging.error(f"Crypto Pay error: {response.text}")
            return None

    except Exception as e:
        logging.error(f"Payment error: {e}")
        return None

# –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
async def open_case(user_id, case_id):
    with sqlite3.connect('users.db') as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥
            cursor.execute('SELECT stars FROM users WHERE user_id = ?', (user_id,))
            user = cursor.fetchone()
            if not user:
                return None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

            cursor.execute('SELECT price FROM cases WHERE id = ?', (case_id,))
            case = cursor.fetchone()
            if not case:
                return None, "–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"

            if user['stars'] < case['price']:
                return None, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤–µ–∑–¥"

            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∫–µ–π—Å–∞
            cursor.execute('''
                SELECT i.id, i.name, i.image, i.emoji, i.sell_price, i.withdraw_price
                FROM case_items ci
                JOIN items i ON ci.item_id = i.id
                WHERE ci.case_id = ?
                ORDER BY RANDOM() LIMIT 1
            ''', (case_id,))
            won_item = cursor.fetchone()

            if not won_item:
                return None, "–í –∫–µ–π—Å–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            cursor.execute('''
                INSERT INTO inventory 
                (user_id, item_id, item_name, item_image, emoji, sell_price, withdraw_price)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, won_item['id'], won_item['name'], won_item['image'], 
                 won_item['emoji'], won_item['sell_price'], won_item['withdraw_price']))

            # –°–Ω–∏–º–∞–µ–º –∑–≤–µ–∑–¥—ã
            cursor.execute('''
                UPDATE users SET stars = stars - ? WHERE user_id = ?
            ''', (case['price'], user_id))

            conn.commit()

            return dict(won_item), None

        except Exception as e:
            conn.rollback()
            logging.error(f"Error opening case: {e}")
            return None, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞"

# –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
async def sell_item(user_id, item_id):
    with sqlite3.connect('users.db') as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                SELECT id, sell_price FROM inventory 
                WHERE id = ? AND user_id = ? AND is_withdrawn = FALSE
            ''', (item_id, user_id))
            item = cursor.fetchone()

            if not item:
                return False, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥—ã
            cursor.execute('''
                UPDATE users SET stars = stars + ? WHERE user_id = ?
            ''', (item['sell_price'], user_id))

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
            cursor.execute('''
                DELETE FROM inventory WHERE id = ?
            ''', (item_id,))

            conn.commit()

            return True, None

        except Exception as e:
            conn.rollback()
            logging.error(f"Error selling item: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞"

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞
async def request_withdrawal(user_id, item_id):
    with sqlite3.connect('users.db') as conn:
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''
                SELECT id FROM inventory 
                WHERE id = ? AND user_id = ? AND is_withdrawn = FALSE
            ''', (item_id, user_id))
            item = cursor.fetchone()

            if not item:
                return False, "–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥
            cursor.execute('''
                INSERT INTO withdrawals (user_id, item_id, status)
                VALUES (?, ?, 'pending')
            ''', (user_id, item_id))

            # –ü–æ–º–µ—á–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∫–∞–∫ –≤—ã–≤–æ–¥–∏–º—ã–π
            cursor.execute('''
                UPDATE inventory SET is_withdrawn = TRUE WHERE id = ?
            ''', (item_id,))

            conn.commit()

            return True, None

        except Exception as e:
            conn.rollback()
            logging.error(f"Error requesting withdrawal: {e}")
            return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤—ã–≤–æ–¥–∞"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
async def check_payments():
    while True:
        try:
            with sqlite3.connect('users.db') as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending –ø–ª–∞—Ç–µ–∂–∏
                cursor.execute('''
                    SELECT * FROM payments 
                    WHERE status = 'pending' 
                    AND created_at > datetime('now', '-1 hour')
                ''')
                pending_payments = cursor.fetchall()

                headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}

                for payment in pending_payments:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ Crypto Pay
                    response = requests.get(
                        f"{CRYPTO_PAY_API}/getInvoices?invoice_ids={payment['invoice_id']}",
                        headers=headers
                    )

                    if response.status_code == 200:
                        invoice = response.json().get('result', {}).get('items', [{}])[0]

                        if invoice.get('status') == 'paid':
                            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            cursor.execute('''
                                UPDATE users 
                                SET stars = stars + ? 
                                WHERE user_id = ?
                            ''', (payment['stars'], payment['user_id']))

                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                            cursor.execute('''
                                UPDATE payments 
                                SET status = 'paid', paid_at = CURRENT_TIMESTAMP
                                WHERE invoice_id = ?
                            ''', (payment['invoice_id'],))

                            conn.commit()

                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            await bot.send_message(
                                payment['user_id'],
                                f"‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {payment['stars']} ‚≠ê"
                            )

                        elif invoice.get('status') == 'expired':
                            # –ü–æ–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∫–∞–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π
                            cursor.execute('''
                                UPDATE payments 
                                SET status = 'expired'
                                WHERE invoice_id = ?
                            ''', (payment['invoice_id'],))
                            conn.commit()

        except Exception as e:
            logging.error(f"Payment check error: {e}")

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name

    with sqlite3.connect('users.db') as conn:
        conn.row_factory = sqlite3.Row
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor = conn.execute('''
            INSERT OR IGNORE INTO users
            (user_id, username, first_name, last_name, last_active)
            VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
        ''', (user_id, username, message.from_user.first_name, 
              message.from_user.last_name))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        conn.execute('UPDATE users SET last_active = CURRENT_TIMESTAMP WHERE user_id = ?', (user_id,))

        # –î–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π
        if cursor.rowcount > 0:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–≤–µ–∑–¥—ã
            conn.execute('''
                UPDATE users SET stars = stars + 10 WHERE user_id = ?
            ''', (user_id,))

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç
            conn.execute('''
                INSERT INTO inventory 
                (user_id, item_id, item_name, item_image, emoji, sell_price, withdraw_price)
                SELECT ?, id, name, image, emoji, sell_price, withdraw_price
                FROM items WHERE rarity = 'common' ORDER BY RANDOM() LIMIT 1
            ''', (user_id,))

        conn.commit()

    # –í–ê–ñ–ù–û: –¢–µ–ø–µ—Ä—å –º—ã –ø–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ user_id –≤ URL
    webapp_url = f"{WEBAPP_URL}?user_id={user_id}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(
        "üé∞ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        web_app=types.WebAppInfo(url=webapp_url)
    ))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Star Azart, {message.from_user.first_name}!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å–æ–æ–±—â–∞–µ–º –æ –±–æ–Ω—É—Å–µ
    if cursor.rowcount > 0:
        await message.answer(
            "üéâ –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–æ–Ω—É—Å: 10 ‚≠ê –∏ —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç!"
        )

@dp.message_handler(lambda message: message.text == 'get_user_data')
async def send_user_data(message: types.Message):
    user_id = message.from_user.id
    user_data = await get_user_data(user_id)
    await message.answer(json.dumps(user_data))

# –ö–æ–º–∞–Ω–¥–∞ /pay
@dp.message_handler(commands=['pay'])
async def handle_payment(message: types.Message):
    try:
        user_id = message.from_user.id
        args = message.get_args().split('_')

        if len(args) >= 3 and args[0] == 'pay':
            stars = int(args[2])
            if stars < MIN_PAYMENT:
                await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {MIN_PAYMENT} ‚≠ê")
                return

            amount_usd = stars * STARS_RATE

            invoice = await create_crypto_invoice(user_id, stars, amount_usd)

            if invoice:
                kb = types.InlineKeyboardMarkup()
                kb.add(types.InlineKeyboardButton(
                    text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å",
                    url=invoice['pay_url']
                ))

                await message.answer(
                    f"üíé –°—á–µ—Ç –Ω–∞ {stars} ‚≠ê ({amount_usd:.2f} USDT)\n\n"
                    f"–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 15 –º–∏–Ω—É—Ç",
                    reply_markup=kb
                )
            else:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        else:
            await message.answer(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /pay_100 (–≥–¥–µ 100 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥)\n"
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {MIN_PAYMENT} ‚≠ê"
            )

    except Exception as e:
        logging.error(f"Payment command error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@dp.message_handler(content_types=['web_app_data'])
async def handle_web_app_data(message: types.Message):
    try:
        data = json.loads(message.web_app_data.data)
        user_id = message.from_user.id
        action = data.get('action')

        if action == 'open_case':
            case_id = data.get('case_id')
            if not case_id:
                await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –∫–µ–π—Å–∞")
                return

            won_item, error = await open_case(user_id, case_id)
            if error:
                await message.answer(f"‚ùå {error}")
                return

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await get_user_data(user_id)
            webapp_url = (
                f"{WEBAPP_URL}?"
                f"user_id={user_id}&"
                f"stars={user_data['balance']}&"
                f"inventory={json.dumps(user_data['inventory'])}"
            )

            await message.answer(
                f"üéâ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª–∏: {won_item['name']}!\n"
                f"üíé –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {won_item['sell_price']} ‚≠ê",
                reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                    types.KeyboardButton(
                        "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        web_app=types.WebAppInfo(url=webapp_url)
                    )
                )
            )

        elif action == 'sell_item':
            item_id = data.get('item_id')
            if not item_id:
                await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –ø—Ä–µ–¥–º–µ—Ç–∞")
                return

            success, error = await sell_item(user_id, item_id)
            if not success:
                await message.answer(f"‚ùå {error}")
                return

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await get_user_data(user_id)
            webapp_url = (
                f"{WEBAPP_URL}?"
                f"user_id={user_id}&"
                f"stars={user_data['balance']}&"
                f"inventory={json.dumps(user_data['inventory'])}"
            )

            await message.answer(
                "‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω!",
                reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                    types.KeyboardButton(
                        "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        web_app=types.WebAppInfo(url=webapp_url)
                    )
                )
            )

        elif action == 'withdraw_item':
            item_id = data.get('item_id')
            if not item_id:
                await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω ID –ø—Ä–µ–¥–º–µ—Ç–∞")
                return

            success, error = await request_withdrawal(user_id, item_id)
            if not success:
                await message.answer(f"‚ùå {error}")
                return

            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await get_user_data(user_id)
            webapp_url = (
                f"{WEBAPP_URL}?"
                f"user_id={user_id}&"
                f"stars={user_data['balance']}&"
                f"inventory={json.dumps(user_data['inventory'])}"
            )

            await message.answer(
                "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!",
                reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add(
                    types.KeyboardButton(
                        "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        web_app=types.WebAppInfo(url=webapp_url)
                    )
                )
            )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            for admin_id in ADMIN_IDS:
                try:
                    await bot.send_message(
                        admin_id,
                        f"üÜï –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username or message.from_user.id}\n"
                        f"ID –ø—Ä–µ–¥–º–µ—Ç–∞: {item_id}"
                    )
                except Exception as e:
                    logging.error(f"Error notifying admin: {e}")

        else:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

    except json.JSONDecodeError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logging.error(f"WebApp error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

# –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(commands=['admin'])
async def admin_panel(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        callback_data="admin_stats"
    ))
    keyboard.add(types.InlineKeyboardButton(
        "üìù –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–≤–æ–¥",
        callback_data="admin_withdrawals"
    ))

    await message.answer(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query_handler(lambda c: c.data.startswith('admin_'))
async def process_admin_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in ADMIN_IDS:
        await bot.answer_callback_query(callback_query.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    action = callback_query.data

    if action == 'admin_stats':
        with sqlite3.connect('users.db') as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute('SELECT COUNT(*) as users FROM users')
            total_users = cursor.fetchone()['users']

            cursor.execute('SELECT SUM(stars) as stars FROM users')
            total_stars = cursor.fetchone()['stars'] or 0

            cursor.execute('''
                SELECT COUNT(*) as payments, SUM(amount_usd) as amount 
                FROM payments WHERE status = 'paid'
            ''')
            payments = cursor.fetchone()
            total_payments = payments['payments'] or 0
            total_amount = payments['amount'] or 0

            cursor.execute('SELECT COUNT(*) as cases_opened FROM inventory')
            cases_opened = cursor.fetchone()['cases_opened']

            await bot.send_message(
                user_id,
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"üí´ –í—Å–µ–≥–æ –∑–≤–µ–∑–¥: {total_stars}\n"
                f"üí∞ –ü–ª–∞—Ç–µ–∂–µ–π: {total_payments} –Ω–∞ —Å—É–º–º—É {total_amount:.2f} USDT\n"
                f"üéÅ –û—Ç–∫—Ä—ã—Ç–æ –∫–µ–π—Å–æ–≤: {cases_opened}"
            )

    elif action == 'admin_withdrawals':
        with sqlite3.connect('users.db') as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()

            cursor.execute('''
                SELECT w.id, u.username, u.first_name, i.item_name, i.emoji, w.created_at
                FROM withdrawals w
                JOIN users u ON w.user_id = u.user_id
                JOIN inventory i ON w.item_id = i.id
                WHERE w.status = 'pending'
                ORDER BY w.created_at
            ''')
            withdrawals = cursor.fetchall()

            if not withdrawals:
                await bot.send_message(user_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥")
                return

            for withdrawal in withdrawals:
                keyboard = types.InlineKeyboardMarkup()
                keyboard.add(
                    types.InlineKeyboardButton(
                        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        callback_data=f"approve_{withdrawal['id']}"
                    ),
                    types.InlineKeyboardButton(
                        "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data=f"reject_{withdrawal['id']}"
                    )
                )

                await bot.send_message(
                    user_id,
                    f"üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ #{withdrawal['id']}\n\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {withdrawal['first_name']} (@{withdrawal['username']})\n"
                    f"üéÅ –ü—Ä–µ–¥–º–µ—Ç: {withdrawal['emoji']} {withdrawal['item_name']}\n"
                    f"üïí –î–∞—Ç–∞: {withdrawal['created_at']}",
                    reply_markup=keyboard
                )

    elif action.startswith('approve_'):
        withdrawal_id = int(action.split('_')[1])
        with sqlite3.connect('users.db') as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()

            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞
                cursor.execute('''
                    UPDATE withdrawals 
                    SET status = 'completed', 
                        completed_at = CURRENT_TIMESTAMP,
                        admin_id = ?
                    WHERE id = ?
                ''', (user_id, withdrawal_id))

                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø—Ä–µ–¥–º–µ—Ç–µ
                cursor.execute('''
                    SELECT w.user_id, i.item_name, i.emoji
                    FROM withdrawals w
                    JOIN inventory i ON w.item_id = i.id
                    WHERE w.id = ?
                ''', (withdrawal_id,))
                info = cursor.fetchone()

                conn.commit()

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await bot.send_message(
                    info['user_id'],
                    f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞ {info['emoji']} {info['item_name']} –æ–¥–æ–±—Ä–µ–Ω!"
                )

                await bot.answer_callback_query(
                    callback_query.id,
                    "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω"
                )

            except Exception as e:
                conn.rollback()
                logging.error(f"Error approving withdrawal: {e}")
                await bot.answer_callback_query(
                    callback_query.id,
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞"
                )

    elif action.startswith('reject_'):
        withdrawal_id = int(action.split('_')[1])
        with sqlite3.connect('users.db') as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()

            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –ø—Ä–µ–¥–º–µ—Ç–µ
                cursor.execute('''
                    SELECT w.user_id, i.id as item_id, i.item_name, i.emoji
                    FROM withdrawals w
                    JOIN inventory i ON w.item_id = i.id
                    WHERE w.id = ?
                ''', (withdrawal_id,))
                info = cursor.fetchone()

                if not info:
                    await bot.answer_callback_query(
                        callback_query.id,
                        "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    )
                    return

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–≤–æ–¥–∞
                cursor.execute('''
                    UPDATE withdrawals 
                    SET status = 'rejected', 
                        completed_at = CURRENT_TIMESTAMP,
                        admin_id = ?
                    WHERE id = ?
                ''', (user_id, withdrawal_id))

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                cursor.execute('''
                    UPDATE inventory 
                    SET is_withdrawn = FALSE 
                    WHERE id = ?
                ''', (info['item_id'],))

                conn.commit()

                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await bot.send_message(
                    info['user_id'],
                    f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø—Ä–µ–¥–º–µ—Ç–∞ {info['emoji']} {info['item_name']} –æ—Ç–∫–ª–æ–Ω–µ–Ω."
                )

                await bot.answer_callback_query(
                    callback_query.id,
                    "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω"
                )

            except Exception as e:
                conn.rollback()
                logging.error(f"Error rejecting withdrawal: {e}")
                await bot.answer_callback_query(
                    callback_query.id,
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –≤—ã–≤–æ–¥–∞"
                )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    init_db()
    loop = asyncio.get_event_loop()
    loop.create_task(load_initial_data())
    loop.create_task(check_payments())
    executor.start_polling(dp, skip_updates=True)