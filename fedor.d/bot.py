from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import sqlite3
import requests
import logging
from datetime import datetime

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
TOKEN = "8001659110:AAE4JyLTuX5s6zyj5F_CQoW5e-J-FGhosg4"
CRYPTO_PAY_API = "https://pay.crypt.bot/api"
CRYPTO_PAY_TOKEN = "421215:AAjdPiEHPnyscrlkUMEICJzkonZIZJDkXo9"
STARS_RATE = 1.4  # 1 –∑–≤–µ–∑–¥–∞ = 1.4 —Ä—É–±–ª—è
MIN_PAYMENT = 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∑–≤–µ–∑–¥
WEBAPP_URL = "https://star-ruddy-three.vercel.app/"

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
def init_db():
    with sqlite3.connect('users.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                stars INTEGER DEFAULT 0,
                last_active TIMESTAMP
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                invoice_id TEXT PRIMARY KEY,
                user_id INTEGER,
                stars INTEGER,
                amount_rub REAL,
                status TEXT CHECK(status IN ('pending', 'paid', 'expired')),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        ''')
        conn.commit()

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
@dp.message_handler(commands=['start', 'menu'])
async def unified_start(message: types.Message):
    args = message.get_args()

    if args:
        if args.startswith('pay_'):
            try:
                _, user_id, stars = args.split('_')
                stars = int(stars)
                if stars < MIN_PAYMENT:
                    await message.answer(f"‚ùå –ú–∏–Ω–∏–º—É–º {MIN_PAYMENT} –∑–≤–µ–∑–¥")
                    return
                await process_payment(message, user_id, stars)
            except Exception as e:
                logger.error(f"Payment error: {e}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")
        elif args.startswith('success_'):
            _, user_id, stars = args.split('_')
            await message.answer(
                f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {stars} ‚≠ê\n"
                f"–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å'"
            )
    else:
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton(
            "üé∞ –û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
            web_app=types.WebAppInfo(url=WEBAPP_URL)
        ))

        await message.answer(
            "üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Star Azart! üåü\n\n"
            "–ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É –≤ –Ω–∞—à–∏—Ö —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –∫–µ–π—Å–∞—Ö!",
            reply_markup=keyboard
        )

# ===== –û–ü–õ–ê–¢–ê =====
async def process_payment(message: types.Message, user_id: str, stars: int):
    amount_rub = round(stars * STARS_RATE, 2)

    try:
        # 1. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with sqlite3.connect('users.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR IGNORE INTO users (user_id, username, first_name)
                VALUES (?, ?, ?)
            ''', (user_id, message.from_user.username, message.from_user.first_name))
            conn.commit()

        # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞
        headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
        payload = {
            "asset": "USDT",
            "amount": str(amount_rub),
            "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {stars} –∑–≤–µ–∑–¥ (ID: {user_id})",
            "paid_btn_url": f"https://t.me/StarAzart_bot?start=success_{user_id}_{stars}",
            "allow_anonymous": False
        }

        response = requests.post(
            f"{CRYPTO_PAY_API}/createInvoice",
            headers=headers,
            json=payload,
            timeout=10
        )
        response.raise_for_status()
        invoice = response.json()['result']

        # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        with sqlite3.connect('users.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO payments (invoice_id, user_id, stars, amount_rub, status)
                VALUES (?, ?, ?, ?, ?)
            ''', (invoice['invoice_id'], user_id, stars, amount_rub, 'pending'))
            conn.commit()

        # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å",
            url=invoice['pay_url']
        ))
        kb.add(types.InlineKeyboardButton(
            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            callback_data=f"check_{invoice['invoice_id']}"
        ))

        await message.answer(
            f"üíé *–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É* üíé\n\n"
            f"‚Ä¢ –ó–≤–µ–∑–¥—ã: *{stars} ‚≠ê*\n"
            f"‚Ä¢ –°—É–º–º–∞: *{amount_rub} ‚ÇΩ*\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã\n\n"
            f"–û–ø–ª–∞—Ç–∏—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç",
            parse_mode="Markdown",
            reply_markup=kb
        )

    except requests.exceptions.RequestException as e:
        logger.error(f"CryptoPay API error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π")
    except Exception as e:
        logger.error(f"Payment processing error: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂")

# ===== –ü–†–û–í–ï–†–ö–ê –û–ü–õ–ê–¢–´ =====
@dp.callback_query_handler(lambda c: c.data.startswith('check_'))
async def check_payment(callback: types.CallbackQuery):
    invoice_id = callback.data.split('_')[1]

    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
        response = requests.get(
            f"{CRYPTO_PAY_API}/getInvoices?invoice_ids={invoice_id}",
            headers=headers,
            timeout=10
        )
        response.raise_for_status()
        invoice = response.json()['result']['items'][0]

        # 2. –ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω–æ
        if invoice['status'] == 'paid':
            with sqlite3.connect('users.db') as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT user_id, stars FROM payments
                    WHERE invoice_id = ? AND status = 'pending'
                ''', (invoice_id,))
                payment = cursor.fetchone()

                if payment:
                    user_id, stars = payment
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
                    cursor.execute('''
                        UPDATE users SET stars = stars + ?
                        WHERE user_id = ?
                    ''', (stars, user_id))
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    cursor.execute('''
                        UPDATE payments SET status = 'paid'
                        WHERE invoice_id = ?
                    ''', (invoice_id,))
                    conn.commit()

                    await callback.message.edit_text(
                        f"üéâ *–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!*\n\n"
                        f"–ù–∞ –≤–∞—à —Å—á–µ—Ç –∑–∞—á–∏—Å–ª–µ–Ω–æ: *{stars} ‚≠ê*\n\n"
                        f"–û–±–Ω–æ–≤–∏—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞",
                        parse_mode="Markdown"
                    )
                else:
                    await callback.answer("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
        else:
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)

    except Exception as e:
        logger.error(f"Payment check error: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

# ===== –ó–ê–ü–£–°–ö =====
if __name__ == '__main__':
    init_db()
    logger.info("–ë–æ—Ç Star Azart –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    executor.start_polling(dp, skip_updates=True)