from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import sqlite3
import requests
import logging
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "8001659110:AAE4JyLTuX5s6zyj5F_CQoW5e-J-FGhosg4"
CRYPTO_PAY_API = "https://pay.crypt.bot/api"
CRYPTO_PAY_TOKEN = "421215:AAjdPiEHPnyscrlkUMEICJzkonZIZJDkXo9"
STARS_RATE = 1.4  # 1 –∑–≤–µ–∑–¥–∞ = 1.4 —Ä—É–±–ª—è
MIN_PAYMENT = 10  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∑–≤–µ–∑–¥
WEBAPP_URL = "https://your-domain.com/index.html"  # url web_app
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def init_db():
    with sqlite3.connect('users.db') as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                stars INTEGER DEFAULT 0,
                last_active TIMESTAMP
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS payments (
                invoice_id TEXT PRIMARY KEY,
                user_id INTEGER,
                stars INTEGER,
                amount_rub REAL,
                status TEXT CHECK(status IN ('pending', 'paid', 'expired')),
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES users(user_id)
            )
        ''')
        conn.commit()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    args = message.get_args()

    if args and args.startswith('pay_'):
        try:
            _, user_id, stars = args.split('_')
            stars = int(stars)

            if stars < MIN_PAYMENT:
                await message.answer(f"‚ùå –ú–∏–Ω–∏–º—É–º {MIN_PAYMENT} –∑–≤–µ–∑–¥")
                return

            await process_payment(message, user_id, stars)

        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")

    elif args and args.startswith('success_'):
        _, user_id, stars = args.split('_')
        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {stars} ‚≠ê\n"
            f"–í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–∏–Ω–∏-–∞–ø–ø –∏ –Ω–∞–∂–º–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å'"
        )

@dp.message_handler(commands=['start', 'menu'])
async def send_welcome(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button = types.KeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=types.WebAppInfo(url=WEBAPP_URL))
    keyboard.add(button)

    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Star Azart! üé∞\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=keyboard
    )

async def process_payment(message: types.Message, user_id: str, stars: int):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    amount_rub = round(stars * STARS_RATE, 2)

    try:
        # 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with sqlite3.connect('users.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR IGNORE INTO users (user_id, username, first_name)
                VALUES (?, ?, ?)
            ''', (user_id, message.from_user.username, message.from_user.first_name))
            conn.commit()

        # 2. –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ CryptoPay
        headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
        payload = {
            "asset": "USDT",
            "amount": str(amount_rub),
            "description": f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ {stars} –∑–≤–µ–∑–¥ (ID: {user_id})",
            "paid_btn_url": f"https://t.me/StarAzart_bot?start=success_{user_id}_{stars}",
            "allow_anonymous": False
        }

        response = requests.post(
            f"{CRYPTO_PAY_API}/createInvoice",
            headers=headers,
            json=payload,
            timeout=10
        )
        response.raise_for_status()
        invoice = response.json()['result']

        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
        with sqlite3.connect('users.db') as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO payments (invoice_id, user_id, stars, amount_rub, status)
                VALUES (?, ?, ?, ?, ?)
            ''', (invoice['invoice_id'], user_id, stars, amount_rub, 'pending'))
            conn.commit()

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton(
            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
            url=invoice['pay_url']
        ))
        kb.add(types.InlineKeyboardButton(
            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É",
            callback_data=f"check_{invoice['invoice_id']}"
        ))

        await message.answer(
            f"*–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É*\n\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: *{stars} ‚≠ê*\n"
            f"‚Ä¢ –°—É–º–º–∞: *{amount_rub} RUB*\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã",
            parse_mode="Markdown",
            reply_markup=kb
        )

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ API CryptoPay: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ process_payment: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞")

@dp.callback_query_handler(lambda c: c.data.startswith('check_'))
async def check_payment(callback: types.CallbackQuery):
    invoice_id = callback.data.split('_')[1]

    try:
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ CryptoPay
        headers = {"Crypto-Pay-API-Token": CRYPTO_PAY_TOKEN}
        response = requests.get(
            f"{CRYPTO_PAY_API}/getInvoices?invoice_ids={invoice_id}",
            headers=headers,
            timeout=10
        )
        response.raise_for_status()
        invoice = response.json()['result']['items'][0]

        # 2. –ï—Å–ª–∏ –æ–ø–ª–∞—á–µ–Ω–æ - –Ω–∞—á–∏—Å–ª—è–µ–º –∑–≤–µ–∑–¥—ã
        if invoice['status'] == 'paid':
            with sqlite3.connect('users.db') as conn:
                cursor = conn.cursor()

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
                cursor.execute('''
                    SELECT user_id, stars FROM payments
                    WHERE invoice_id = ? AND status = 'pending'
                ''', (invoice_id,))
                payment = cursor.fetchone()

                if payment:
                    user_id, stars = payment

                    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
                    cursor.execute('''
                        UPDATE users SET stars = stars + ?
                        WHERE user_id = ?
                    ''', (stars, user_id))

                    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                    cursor.execute('''
                        UPDATE payments SET status = 'paid'
                        WHERE invoice_id = ?
                    ''', (invoice_id,))
                    conn.commit()

                    await callback.message.edit_text(
                        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                        f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: *{stars} ‚≠ê*\n\n"
                        f"–û–±–Ω–æ–≤–∏—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
                        parse_mode="Markdown"
                    )
                else:
                    await callback.answer("–ü–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
        else:
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ check_payment: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", show_alert=True)

if __name__ == '__main__':
    init_db()
    executor.start_polling(dp, skip_updates=True)